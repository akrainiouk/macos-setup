#!/usr/bin/env bash

source bash-libs lib-scaffold lib-json

declare -a args=()
while (( $# > 0 )); do 
  case "$1" in
  -o | --output)      contentFile="$2"; shift 2;;
  -D | --dump-header) reject "Unsupported option: '$1''";;
  -w | --write-out)   reject "Unsupported option: '$1'";;
  *) args+=( "$1" ); shift;;
  esac
done

[[ -v contentFile ]] || {
  contentFile="$(mktemp)"
}
  
response="$(curl --silent --show-error \
  --output "$contentFile" \
  --write-out '{ "meta": %{json}, "headers": %{header_json} }' \
  "${args[@]}"
)" || exit $?
hash="$(sha256sum "$contentFile" | cut -f 1 -d ' ')"
content="null"
if json.test <<< "$response" '.meta.size_download > 0 and .meta.size_download < 2048'; then
  contentType="$(jq <<< "$response" --raw-output '.headers["content-type"][-1]')"
  case "$contentType" in
  */xml*)  content="$(yq --input-format xml < "$contentFile" --output-format json || jq --raw-input --slurp)";;
  */json*) content="$(jq < "$contentFile" || jq --raw-input --slurp)";;
  text/*)  content="$(jq < "$contentFile" --raw-input --slurp)";;
  esac
fi
jq <<< "$response" --argjson content "$content" --arg hash "$hash" '
  {
    code: .meta.http_code, 
    headers: .headers | with_entries(.value |= if length == 1 then .[0] else . end),
    content: {
      length: .meta.size_download,
      hash: $hash, 
      file: .meta.filename_effective
    }
  }
  | if $content then .content.body = $content else . end
' | yq --prettyPrint
